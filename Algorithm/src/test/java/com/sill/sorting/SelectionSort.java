package com.sill.sorting;import org.junit.Test;/** * 选择排序 * * @author LiuShang * @date 2023-05-27 08:35 */public class SelectionSort {    final int[] nums = {4, 2, 1, 5, 6, 7, 9, 8, 3};    @Test    public void demo01() {        sortAchieve(nums);        // print        for (int value : nums) {            System.out.println(value);        }    }    /*    排序实现:        - 首先通过两个排序            - 第一个循环通过常规的遍历                - 记录它每次遍历的数组下标作为最小 (or 最大) 数值的下标                - 第二个循环遍历次数则为上一循环下标 +1 次（因为每次遍历后都将最小 (or 最大) 数值替换到第一次循环的下标位）                    - 每次遍历比较当前下标数值与当前最小 (or 最大) 下标数值,差异时将最小 (or 最大) 数值下标替换为当前数值下标                - 将当前下标位数值与遍历后当前最小 (or 最大) 下标位数值进行替换     */    private void sortAchieve(int[] nums) {        for (int i = 0; i < nums.length; i++) {            int minNumIdx = i;            for (int j = (i + 1); j < nums.length; j++) {                if (nums[j] < nums[minNumIdx]) {                    minNumIdx = j;                }            }            int temp = nums[i];            nums[i] = nums[minNumIdx];            nums[minNumIdx] = temp;        }    }}