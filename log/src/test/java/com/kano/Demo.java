package com.kano;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import java.io.File;/** * @author LiuShang * @date 2023-09-06 02:15 */@Slf4jpublic class Demo {    @Test    public void demo01() {        // 整数拓展：进制        int i2 = 0b10; // 2 进制        int i1 = 10; // 10 进制        int i3 = 010; // 8 进制        int i4 = 0x10; // 16 进制        System.out.println(i1);        System.out.println(i2);        System.out.println(i3);        System.out.println(i4);        System.out.println(i3 + i4);    }    @Test    public void demo02() {        // 字符拓展：所有字符本质上还是数字        int i1 = '字';        char c1 = 23383;        System.out.println(i1);        System.out.println(c1);        System.out.println(i1 == c1);    }    @Test    public void demo03() {        /*        运算符拓展：位运算        A = 0011 1100        B = 0000 1101        A & B = 0000 1100 (与：同位同 1 则 1，否则取 0)        A | B = 0011 1101 (或：同位有 1 则 1，否者取 0)        A ^ B = 0011 0001 (异或：同位 1,0 则 1，否则取 0)        ~B    = 1111 0010 (取反：同位 1,0 取 1 | 0,0 取 1 | 1,1 取 0)         */        int A = 0b00111100; // 60        int B = 0b00001101; // 13        System.out.println("A & B = " + (A & B));        System.out.println(0b00001100);        System.out.println("A | B = " + (A | B));        System.out.println(0b00111101);        System.out.println("A ^ B = " + (A ^ B));        System.out.println(0b00110001);        System.out.println("~B = " + ~B);        // 此处需要转为 byte 是因为 byte 长度为 2，由 8 个 01 构成。像 ini 长度为 8，2 进制便有 32 个 01 组成（太长了）        System.out.println((byte) 0b11110010);    }    @Test    public void demo04() {        /*        运算符拓展：位运算        <<  *2        >>  /2        0000 0000   0        0000 0001   1        0000 0010   2        0000 0011   3        0000 0100   4        0000 1000   8        0001 0000   16         */        System.out.println(2 << 3);        System.out.println(16 >> 3);    }}